package  {	import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2World;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Common.Math.b2Vec2;	import Box2D.Dynamics.b2FixtureDef;	import Box2D.Dynamics.b2Fixture;		import General.Input;		public class Creature extends PhysicalEntity {				public var hx:Number;		public var hy:Number;		private var m_footSize;		private var m_feet:b2Fixture;		private var m_grip:Number = Config.CREATURE_MIN_GRIP;				//private var m_frictionImpulse:Number = 0;				private var m_speed:Number;		private var m_strength:Number;		private var m_jumpStrength:Number;		private var m_direction:b2Vec2 = new b2Vec2();		private var m_impulse:b2Vec2 = new b2Vec2();		private var m_canJump:Boolean = false;		private var m_jumping:Boolean = false;		public function Creature(x:Number = 0.0, y:Number = 0.0, hx_:Number = 0.5, hy_:Number = 1.0, angle:Number = 0.0, footSize:Number = 0.25, speed:Number = 5.0, strength:Number = 200.0, jumpStrength:Number = 2500.0) {			super(x,y,angle);			hx = hx_;			hy = hy_;			m_footSize = footSize;						m_speed = speed;			m_strength = strength;			m_jumpStrength = jumpStrength;						if(footSize >= hx || footSize >= hy) {				throw new Error("bro, your feet are too big");			}					}						override protected function createFixtures():void{			super.createFixtures();						var fixtureDef:b2FixtureDef = new b2FixtureDef();						fixtureDef.density = m_material.density;			fixtureDef.friction = m_material.friction;			fixtureDef.restitution = m_material.restitution;						fixtureDef.filter = m_filter;						var shape:b2PolygonShape = new b2PolygonShape();			fixtureDef.shape = shape;						var p1:b2Vec2 = new b2Vec2(-hx,-hy);			var p2:b2Vec2 = new b2Vec2( hx,-hy);			var p3:b2Vec2 = new b2Vec2( hx, hy - m_footSize);			var p4:b2Vec2 = new b2Vec2(-hx, hy - m_footSize);			var p5:b2Vec2 = new b2Vec2(hx - m_footSize, hy);			var p6:b2Vec2 = new b2Vec2(-hx + m_footSize, hy);									//create body			shape.SetAsArray([p1,p2,p3,p4]);			m_body.CreateFixture(fixtureDef);						// create feet			shape.SetAsArray([p4,p3,p5,p6]);						m_feet = m_body.CreateFixture(fixtureDef);						m_body.SetFixedRotation(true);		}				override protected function updateEntity():void{			super.updateEntity();			move();			m_feet.SetFriction(m_material.friction);			//if(m_body.IsAwake()){				//m_canJump = false;			//}		}				private function jump():void{			if(m_canJump)			{				trace("dojump");				m_body.ApplyImpulse(new b2Vec2(0,-m_jumpStrength),m_body.GetWorldCenter());				m_canJump = false;			}		}				private function move():void{			if (Input.isKeyDown(32)) //space			{				jump();			}						if (Input.isKeyPressed(37)) //left			{				m_direction.x --;			}						if (Input.isKeyReleased(37)) //left			{				m_direction.x ++;			}						if (Input.isKeyPressed(39)) //right			{				m_direction.x ++;			}						if (Input.isKeyReleased(39)) //right			{				m_direction.x --;			}						m_impulse.x = m_direction.x * m_strength * m_grip;						if(m_direction.x !=0)			{								var maxMometum:Number = m_speed * m_body.GetMass();				var currentMomentum = m_body.GetLinearVelocity().x * m_body.GetMass();								if(m_impulse.x + currentMomentum < -maxMometum)				{					m_impulse.x = Math.max(-maxMometum - currentMomentum, 0);				}				else if(m_impulse.x + currentMomentum > maxMometum)				{					m_impulse.x = Math.min( maxMometum - currentMomentum, 0);				}								//m_impulse.x += m_frictionImpulse;								m_body.ApplyImpulse(m_impulse,m_body.GetWorldCenter());			}						m_grip = Config.CREATURE_MIN_GRIP;		}				public function setGrip(grip:Number):void		{			trace("setgip",grip);			m_grip = Math.max(Config.CREATURE_MIN_GRIP,grip);		}				public function setFrictionImpulse(impulse:Number):void		{			//m_frictionImpulse = impulse;		}				public function getDirection():b2Vec2		{			return m_direction;		}				override public function getType():int		{			return CREATURE;		}				public function getFeet():b2Fixture		{			return m_feet;		}				public function setCanJump(j:Boolean):void		{			m_canJump = j;		}	}}