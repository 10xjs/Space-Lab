package {	import Box2D.Dynamics.b2Body;	import flash.display.DisplayObject;	import Box2D.Dynamics.b2World;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Common.Math.b2Vec2;	import flash.media.SoundChannel;	import flash.media.Sound;	import flash.media.SoundTransform;	public class PhysicalEntity extends Entity	{				public static const DEFAULT:int = 0;		public static const BOX:int = 1;		public static const BALL:int = 2;		public static const CREATURE:int = 3;				private var m_maxHealth:Number = Config.ENTITY_DEFAULT_MAX_HEALTH;		private var m_health:Number = m_maxHealth;		private var m_impactChannel:SoundChannel;		private var m_voiceChannel:SoundChannel;		protected var m_material:Material;		//public var density:Number = Material.DEFAULT_MATERIAL.density;		//public var friction:Number = Material.DEFAULT_MATERIAL.friction;		//public var restitution:Number = Material.DEFAULT_MATERIAL.restitution;		//public var toughness:Number = Material.DEFAULT_MATERIAL.toughness;		//public var impactResistance:Number = Material.DEFAULT_MATERIAL.impactResistance;		//public var filter:b2FilterData = new b2FilterData();		public function PhysicalEntity(x:Number = 0.0, y:Number = 0.0, angle:Number = 0.0)		{			super(x,y,angle);		}		public function hit(impulse):void		{			damage(impulse);		}		private function damage(impulse:Number):void		{			if (m_material.impactResistance == 0.0 || isStatic())			{				return;			}			var amt = impulse / m_material.impactResistance;			if (amt > m_material.toughness)			{				m_health -=  amt;			}		}		public function heal(amt:Number):void		{			if (amt > 0)			{				m_health +=  amt;			}			if (m_health > m_maxHealth)			{				m_health = m_maxHealth;			}		}		override protected function updateEntity():void		{			super.updateEntity();			if (isDead())			{				//var gibs:Emitter = new ThisTypeOfEmitter(this.x,this.y).createOnWorld(m_body.getWorld());				remove();			}		}		public function getHealth():Number		{			return m_health;		}		public function isDead():Boolean		{			return m_health <= 0.0;		}		override public function destroy():void		{			super.destroy();			m_material = null;			m_voiceChannel = null;			m_impactChannel = null;		}		public function setMaterial(material:Material):PhysicalEntity		{			m_material = material;			return this;		}		public function getMaterial():Material		{			return m_material;		}		public function playDeathSound():void		{			var sound:Sound = m_material.soundType.getABreakSound();			if (sound)			{				m_voiceChannel = sound.play();			}			sound = null;		}		public function playImpactSound(v:Number):void		{			var level:Number;			var sound:Sound;			if (v <= Config.ENTITY_SOFT_SOUND_VELOCITY)			{				sound = m_material.soundType.getASoftSound();				level = Config.ENTITY_MIN_SOUND_LEVEL + ((Config.ENTITY_MIN_SOUND_LEVEL - 1) * v * -1) / Config.ENTITY_HARD_SOUND_VELOCITY;			}			else if (v <= Config.ENTITY_HARD_SOUND_VELOCITY)			{				sound = m_material.soundType.getAHardSound();				level = Config.ENTITY_MIN_SOUND_LEVEL + ((Config.ENTITY_MIN_SOUND_LEVEL - 1) * v * -1) / Config.ENTITY_HARD_SOUND_VELOCITY;			}			else			{				sound = m_material.soundType.getAHardSound();				level = 1;			}			trace(sound);			if (sound)			{				m_impactChannel = sound.play(0,0,new SoundTransform(level));			}		}				public function getType():int{			return DEFAULT;		}	}}