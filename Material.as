package {	import flash.utils.ByteArray;	import flash.media.Sound;	public class Material implements ICloneable	{		public function Material(density:Number = Config.MATERIAL_DEFAULT_DENSITY,		 friction:Number = Config.MATERIAL_DEFAULT_FRICTION,		 restitution:Number = Config.MATERIAL_DEFAULT_RESTITUTION,		 impactResistance:Number = Config.MATERIAL_DEFAULT_IMPACT_RESISTANCE,		 toughness:Number = Config.MATERIAL_DEFAULT_TOUGHNESS,		 soundType:SoundType = null,		 textureType:* = null,		 locked:Boolean = false)		{			m_density = density;			m_friction = friction;			m_restitution = restitution;			m_impactResistance = impactResistance;			m_toughness = toughness;			m_soundType = (!soundType)? SoundType.NONE : soundType;			m_locked = locked;		}		static public const DEFAULT:Material = new Material(		Config.MATERIAL_DEFAULT_DENSITY		,Config.MATERIAL_DEFAULT_FRICTION		,Config.MATERIAL_DEFAULT_RESTITUTION		,Config.MATERIAL_DEFAULT_IMPACT_RESISTANCE		,Config.MATERIAL_DEFAULT_TOUGHNESS		,SoundType.NONE		,null		,true		);		static public const ICE_SOLID:Material = new Material(		90.0		,0.001		,0.0		,8000.0		,1.0		,SoundType.GLASS		,null		,true		);		static public const RUBBER_SOLID:Material = new Material(		100.0		,0.75		,0.7		,0.0		,1.0		,SoundType.RUBBER_TIRE		,null		,true		);				static public const CREATURE:Material = new Material(		100.0		,1.0		,0.0		,0.0		,1.0		,SoundType.WOOD_BOX		,null		,true		);		static public const RUBBER_BALL:Material = new Material(		1.0		,0.8		,0.85		,4000.0		,1.0		,SoundType.RUBBER_TIRE		,null		,true		);		static public const WOOD_SOLID:Material = new Material(		40.0		,0.3		,0.0		,0.0		,1.0		,SoundType.WOOD_SOLID		,null		,true		);		static public const WOOD_CRATE:Material = new Material(		20.0		,0.3		,0.0		,16000.0		,0.5		,SoundType.WOOD_CRATE		,null		,true		);		static public const METAL_SOLID:Material = new Material(		200		,0.3		,0.2		,0.0		,1.0		,SoundType.METAL_SOLID		,null		,true		);		static public const METAL_BOX:Material = new Material(		100.0		,0.3		,0.2		,0.0		,1.0		,SoundType.METAL_BOX		,null		,true		);		private var m_locked:Boolean;		private var m_density:Number;		private var m_friction:Number;		private var m_restitution:Number;		private var m_toughness:Number;		private var m_impactResistance:Number;		private var m_soundType:SoundType;		private var m_textureType:*;		public function get density():Number		{			return m_density;		}		public function set density(density:Number):void		{			if (m_locked)			{				throw new Error("bro, you can't edit locked material");			}			m_density = density;		}		public function get friction():Number		{			return m_friction;		}		public function set friction(friction:Number):void		{			if (m_locked)			{				throw new Error("bro, you can't edit locked material");			}			m_friction = friction;		}		public function get restitution():Number		{			return m_restitution;		}		public function set restitution(restitution:Number):void		{			if (m_locked)			{				throw new Error("bro, you can't edit locked material");			}			m_restitution = restitution;		}		public function get toughness():Number		{			return m_toughness;		}		public function set toughness(toughness:Number):void		{			if (m_locked)			{				throw new Error("bro, you can't edit locked material");			}			m_toughness = toughness;		}		public function get impactResistance():Number		{			return m_impactResistance;		}		public function set impactResistance(impactResistance:Number):void		{			if (m_locked)			{				throw new Error("bro, you can't edit locked material");			}			m_impactResistance = impactResistance;		}		public function get soundType():SoundType		{			return m_soundType;		}		public function set soundType(soundType:SoundType):void		{			if (m_locked)			{				throw new Error("bro, you can't edit locked material");			}			m_soundType = soundType;		}		public function clone():*		{			return new Material(m_density,m_friction,m_restitution,m_impactResistance,m_toughness,m_soundType,m_textureType,false);		}		public function destroy():void		{			if (m_locked)			{				throw new Error("bro, you can't edit locked material");			}			m_soundType = null;			m_textureType = null;		}	}}