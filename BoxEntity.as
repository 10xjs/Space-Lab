package  {	import Box2D.Dynamics.b2Body;	import Box2D.Dynamics.b2World;	import Box2D.Collision.Shapes.b2PolygonShape;	import Box2D.Common.Math.b2Vec2;	import Box2D.Dynamics.b2FixtureDef;	import Box2D.Dynamics.b2Fixture;		public class BoxEntity extends PhysicalEntity {				public var hx:Number;		public var hy:Number;		public function BoxEntity(x:Number = 0.0, y:Number = 0.0, hx_:Number = 0.5, hy_:Number = 0.5, angle:Number = 0.0) {			super(x,y,angle);			hx = hx_;			hy = hy_;					}				public function initAsRect(x:Number, y:Number, w:Number, h:Number, angle:Number = 0.0):BoxEntity{			hx = w / 2.0;			hy = h / 2.0;						m_bodyDef.position.Set(x + Math.cos(angle) * hx - Math.sin(angle) * hy, y + Math.sin(angle) * hx + Math.cos(angle) * hy);			m_bodyDef.angle = angle;						hx = Math.abs(hx);			hy = Math.abs(hy);									return this;		}						override protected function createFixtures():void{			super.createFixtures();						var shape:b2PolygonShape = new b2PolygonShape();			shape.SetAsBox(hx,hy);						var fixtureDef:b2FixtureDef = new b2FixtureDef();			fixtureDef.shape = shape;									fixtureDef.density = m_material.density;			fixtureDef.friction = m_material.friction;			fixtureDef.restitution = m_material.restitution;						fixtureDef.filter = m_filter;						m_body.CreateFixture(fixtureDef);						//m_body.SetMassFromShapes();		}						public function getVertices():Array{			var fixture = m_body.GetFixtureList();						var vertices:Array = new Array();						for each(var vertex:b2Vec2 in fixture.GetShape().GetVertices()){				vertices.push(vertex);			}						return vertices;		}				public function getWorldVertices():Array{			var worldVertices:Array = [];						for each (var vertex:b2Vec2 in getVertices()){				worldVertices.push(m_body.GetWorldPoint(vertex));			}						return worldVertices;		}				override public function getType():int{			return BOX;		}			}	}