package {	import Box2D.Dynamics.b2World;	import flash.display.Sprite;	import Box2D.Collision.b2AABB;	import Box2D.Dynamics.b2DebugDraw;	import Box2D.Common.Math.b2Vec2;	import General.Input;	import Box2D.Dynamics.b2Body;	public class Controller	{		public static var c_world:b2World;		public static var c_sprite:Sprite;		//private var m_level:Level;		private var m_addList:LinkedList = new LinkedList("m_addList");		private var m_entityList:LinkedList = new LinkedList("m_entityList");		private var m_destroyList:LinkedList = new LinkedList("m_destroyList");		private var m_entityCount:int = 0;		public function Controller()		{			setupView();			setupWorld();			setupDebug();			setupGame();		}		private function setupGame():void		{			var wallMaterial:Material = Material.WOOD_SOLID;						createEntity(new BoxEntity(-9,0,0.125,6).setMaterial(wallMaterial));			createEntity(new BoxEntity(9,0,0.125,6).setMaterial(wallMaterial));									createEntity(new BoxEntity().initAsRect(-9,4,18,2).setMaterial(wallMaterial));						createEntity(new BoxEntity().initAsRect(0,4,9,2,-Math.PI/8).setMaterial(wallMaterial));						//createEntity(new BoxEntity(0,-5,4,1).setMaterial(Material.WOOD_CRATE).setStatic(false));			//createEntity(new BoxEntity().initAsRect(-4,-4,.5,4).setMaterial(Material.WOOD_CRATE).setStatic(false));			//createEntity(new BoxEntity().initAsRect(3.5,-4,.5,4).setMaterial(Material.WOOD_CRATE).setStatic(false));						//createEntity(new BallEntity(0,-100,1).setMaterial(Material.METAL_SOLID).setStatic(false));			createEntity(new Creature(0,-10).setMaterial(Material.CREATURE).setStatic(false));						/*			for (var i:int = -2; i <= 2; i++){				for (var j:int = -5; j <= -3; j++){					createEntity(new BallEntity(i + 0.5*Math.max(j % 2),j,.5).setMaterial(Material.RUBBER_BALL).setStatic(false));				}			}			*/					}		private function setupView():void		{			c_sprite = new Sprite();		}		private function setupWorld():void		{			var gravity:b2Vec2 = new b2Vec2(0,Config.PHYSICS_GRAVITY);			c_world = new b2World(gravity,Config.PHYSICS_ALLOW_SLEEP);			c_world.SetContactListener(new EntityContactListener());		}		private function setupDebug():void		{			var dbgSprite:Sprite = new Sprite();			c_sprite.addChild(dbgSprite);			var dbgDraw:b2DebugDraw = new b2DebugDraw();			dbgDraw.SetSprite(dbgSprite);			dbgDraw.SetDrawScale(Config.PHYSICS_SCALE);			dbgDraw.SetFillAlpha(0.5);			dbgDraw.SetLineThickness(1);			dbgDraw.SetFlags(			b2DebugDraw.e_shapeBit			| b2DebugDraw.e_jointBit);			//| b2DebugDraw.e_aabbBit			//| b2DebugDraw.e_coreShapeBit			//| b2DebugDraw.e_pairBit			//| b2DebugDraw.e_centerOfMassBit			//);						c_world.SetDebugDraw(dbgDraw);		}		public function createEntity(e:Object):Object		{			Entity(e).setController(this);			m_addList.add(e);			return e;		}		public function createEntities():void		{			m_addList.each(function(e){				m_addList.remove(e);								Entity(e).createInWorld(c_world);								m_entityCount ++;								m_entityList.add(e);			});		}		public function removeEntity(e:*):void		{			m_entityList.remove(e);			m_destroyList.add(e);		}		private function destroyEntities():void		{			m_destroyList.each(function(e){				c_world.DestroyBody(e.m_body);								m_entityCount --;								m_destroyList.remove(e);								e.destroy();								e = null;			});		}		public function update():void		{			//trace("-----");			createEntities();			updateWorld();			updateEntities();			destroyEntities();			Input.update();		}		private function toggleGravity():void		{			var gravity:b2Vec2 = c_world.GetGravity();			gravity.y *=  -1.0;			c_world.SetGravity(gravity);			wakeUpAll();		}		private function wakeUpAll():void		{			var b:b2Body = c_world.GetBodyList();			while (b)			{				b.SetAwake(true);				b = b.GetNext();			}		}		private function updateWorld():void		{			c_world.Step(Config.PHYSICS_TIME_STEP,Config.PHYSICS_POSITION_ITERATIONS,Config.PHYSICS_VELOCITY_ITERATIONS);			if (Config.PHYSICS_DEBUG_ENABLED)			{				c_world.DrawDebugData();			}			c_world.ClearForces();		}		private function updateEntities():void		{			m_entityList.each(function(e){			Entity(e).update();			});		}	}}