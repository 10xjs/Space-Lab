package {	public class LinkedList	{				public var name:String;		private var m_list:Object;				public function LinkedList(name_:String){			name = name_;		}		public function add(e:Object):void		{			if (e.getList())			{				throw new Error("bro, this element is already part of a list");			}			e.setPrev(null);			e.setNext(m_list);			e.setList(this);			if (m_list)			{				m_list.setPrev(e);			}			m_list = e;		}		public function remove(e:Object):void		{			if (e.getList() != this)			{				throw new Error("bro, this element belongs to a different list");			}			if (e.getPrev())			{				e.getPrev().setNext(e.getNext());			}			if (e.getNext())			{				e.getNext().setPrev(e.getPrev());			}			if (e === m_list)			{				m_list = e.getNext();			}			e.setPrev(null);			e.setNext(null);			e.setList(null);		}		public function each(callback:Function):void		{			var current = m_list;			var next;			while (current)			{				next = current.getNext();				callback(current);				current = next;			}			next = null;			current = null;		}		public function get first():Object		{			return m_list;		}	}}