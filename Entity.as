package {		import Box2D.Dynamics.b2Body;	import flash.display.DisplayObject;	import Box2D.Dynamics.b2World;	import Box2D.Dynamics.b2BodyDef;	import Box2D.Dynamics.b2FilterData;	import Box2D.Common.Math.b2Vec2;		public class Entity implements ILinkedListElement{						public var m_body:b2Body;		private var m_controller:Controller;		public var m_filter:b2FilterData		protected var m_bodyDef:b2BodyDef;				private var m_static:Boolean = true;				public function Entity(x:Number = 0.0, y:Number = 0.0, angle:Number = 0.0){			m_bodyDef = new b2BodyDef();			m_bodyDef.position.Set(x,y);			m_bodyDef.angle = angle;			m_bodyDef.angularDamping = Config.PHYSICS_ANGULAR_DAMPING;			m_bodyDef.linearDamping = Config.PHYSICS_LINEAR_DAMPING;						m_bodyDef.userData = this;						m_filter = new b2FilterData();		}				public function update():void{			updateEntity();		}				protected function createBody(world:b2World){			m_body = world.CreateBody(m_bodyDef);			if(! m_static) m_body.SetType(b2Body.b2_dynamicBody);			m_bodyDef = null;		}				public function createInWorld(world:b2World):Entity{			createBody(world);			createFixtures();						return this;		}				protected function createFixtures():void{			//overridden by subclasses		}				protected function updateEntity():void{			//overridden by subclasses		}				public function remove():void{			//remove sprite			m_controller.removeEntity(this);		}				public function destroy():void{			m_body = null;			m_controller = null;			m_filter = null;			m_bodyDef = null;		}				public function getCenter():b2Vec2{			return m_body.GetPosition();		}				public function setStatic(flag:Boolean):Entity{			m_static = flag;			return this;		}				public function isStatic():Boolean{			return m_body.GetType() == b2Body.b2_staticBody;		}								public function getController():Controller{			return m_controller;		}				public function setController(controller:Controller):void{			m_controller = controller;		}				// LinkedList interface		private var m_prev:Entity;		private var m_next:Entity;		private var m_list:LinkedList;				public function getNext():Object{			return m_next;		}				public function setNext(e:Object):void{			m_next = Entity(e);		}				public function getPrev():Object{			return m_prev;		}				public function setPrev(e:Object):void{			m_prev = Entity(e);		}				public function getList():LinkedList{			return m_list;		}				public function setList(list:LinkedList):void{			m_list = list;		}	}}