package {	import flash.media.SoundChannel;	import flash.media.Sound;	import flash.media.SoundTransform;	import flash.events.Event;	public class CollisionSound implements ILinkedListElement	{		public var entityA:PhysicalEntity;		public var entityB:PhysicalEntity;				private var m_controller:SoundController;		public var channelA:SoundChannel;		public var channelB:SoundChannel;				public function play(soundDefA:SoundDef,soundDefB:SoundDef = null):void		{			if (channelA)			{				channelA.removeEventListener(Event.SOUND_COMPLETE,soundCompleteHandler);			}						if (channelB)			{				channelB.removeEventListener(Event.SOUND_COMPLETE,soundCompleteHandler);			}			channelA = soundDefA.sound.play(0,0,new SoundTransform(soundDef.level));			channelA.addEventListener(Event.SOUND_COMPLETE,soundCompleteHandler);		}		private function soundCompleteHandler(e:Event):void		{			if (channelA)			{							}						m_controller.removeCollisionSound(this);		}		public function destroy():void		{			if(channel)			{				channel.stop();			}			channel = null;			entityA = null;			entityB = null;			m_controller = null;		}						public function getController():SoundController{			return m_controller;		}				public function setController(controller:SoundController):void{			m_controller = controller;		}		// LinkedList interface		private var m_prev:Entity;		private var m_next:Entity;		private var m_list:PointerList;		public function getNext():Object		{			return m_next;		}		public function setNext(e:Object):void		{			m_next = Entity(e);		}		public function getPrev():Object		{			return m_prev;		}		public function setPrev(e:Object):void		{			m_prev = Entity(e);		}		public function getList():PointerList		{			return m_list;		}		public function setList(list:PointerList):void		{			m_list = list;		}	}}